import time
import threading
import os
import sys
import random
import json
import logging

import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# --- Thi·∫øt l·∫≠p Logging ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)

class GoogleMeetBot:
    """
    M·ªôt bot ƒë·ªÉ t·ª± ƒë·ªông tham gia Google Meet v·ªõi c√°c bi·ªán ph√°p ch·ªëng ph√°t hi·ªán n√¢ng cao.
    """

    def __init__(self, meet_url, bot_name="Guest Bot", headless=True, profile_path="/app/chrome-profile"):
        self.meet_url = meet_url
        self.bot_name = bot_name
        self.headless = headless
        self.profile_path = profile_path
        self.driver = None
        self.start_time = time.time()

        # T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
        os.makedirs("/app/screenshots", exist_ok=True)
        os.makedirs("/app/output", exist_ok=True)

    def _setup_driver(self):
        """Thi·∫øt l·∫≠p c√°c t√πy ch·ªçn Chrome v√† kh·ªüi t·∫°o driver."""
        logging.info("‚öôÔ∏è  Thi·∫øt l·∫≠p c√°c t√πy ch·ªçn Chrome...")
        options = uc.ChromeOptions()

        # T√πy ch·ªçn c∆° b·∫£n
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--start-maximized")
        options.add_argument("--window-size=1920,1080")
        
        if self.headless:
            options.add_argument("--headless=new")

        # T√πy ch·ªçn media
        options.add_argument("--use-fake-ui-for-media-stream")
        options.add_argument("--use-fake-device-for-media-stream")
        options.add_argument("--autoplay-policy=no-user-gesture-required")
        
        # T√πy ch·ªçn ch·ªëng ph√°t hi·ªán
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--disable-extensions")
        options.add_argument("--disable-infobars")
        options.add_argument("--disable-popup-blocking")
        options.add_argument("--lang=en-US")
        
        # S·ª≠ d·ª•ng profile ƒë·ªÉ l∆∞u tr·ªØ cookie, gi√∫p phi√™n l√†m vi·ªác ·ªïn ƒë·ªãnh h∆°n
        options.add_argument(f"--user-data-dir={self.profile_path}")
        options.add_argument("--profile-directory=Default")
        
        # Thi·∫øt l·∫≠p Preferences
        prefs = {
            "profile.default_content_setting_values.media_stream_mic": 1,
            "profile.default_content_setting_values.media_stream_camera": 1,
            "profile.default_content_setting_values.notifications": 2,
        }
        options.add_experimental_option("prefs", prefs)

        logging.info("üåê  Kh·ªüi t·∫°o Chrome driver v·ªõi undetected_chromedriver...")
        self.driver = uc.Chrome(options=options, version_main=120) # Pin version ƒë·ªÉ ·ªïn ƒë·ªãnh
        self.driver.set_page_load_timeout(60)

    def _apply_stealth_measures(self):
        """√Åp d·ª•ng c√°c ƒëo·∫°n JS ƒë·ªÉ che gi·∫•u c√°c thu·ªôc t√≠nh c·ªßa tr√¨nh duy·ªát t·ª± ƒë·ªông."""
        logging.info("ü•∑  √Åp d·ª•ng c√°c bi·ªán ph√°p t√†ng h√¨nh n√¢ng cao...")
        stealth_script = """
            // V√¥ hi·ªáu h√≥a thu·ªôc t√≠nh webdriver
            Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
            // Gi·∫£ m·∫°o plugins
            Object.defineProperty(navigator, 'plugins', {
                get: () => [
                    { description: 'Portable Document Format', filename: 'internal-pdf-viewer', name: 'Chrome PDF Plugin' },
                    { description: 'WebKit built-in PDF', filename: 'internal-pdf-viewer', name: 'WebKit built-in PDF' },
                ],
            });
            // Gi·∫£ m·∫°o ng√¥n ng·ªØ
            Object.defineProperty(navigator, 'languages', { get: () => ['en-US', 'en'] });
            // Gi·∫£ m·∫°o th√¥ng tin WebGL
            const getParameter = WebGLRenderingContext.prototype.getParameter;
            WebGLRenderingContext.prototype.getParameter = function(parameter) {
                if (parameter === 37445) { return 'Intel Open Source Technology Center'; }
                if (parameter === 37446) { return 'Mesa DRI Intel(R) Ivybridge Mobile '; }
                return getParameter(parameter);
            };
            // Gi·∫£ m·∫°o quy·ªÅn truy c·∫≠p
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                Promise.resolve({ state: Notification.permission }) :
                originalQuery(parameters)
            );
        """
        try:
            self.driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
                "source": stealth_script
            })
            logging.info("ü•∑  √Åp d·ª•ng JavaScript t√†ng h√¨nh th√†nh c√¥ng.")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ √°p d·ª•ng JavaScript t√†ng h√¨nh: {e}")

    def _human_like_click(self, element, delay_range=(0.6, 1.2)):
        """M√¥ ph·ªèng h√†nh ƒë·ªông di chuy·ªÉn chu·ªôt v√† nh·∫•p chu·ªôt c·ªßa con ng∆∞·ªùi."""
        action = ActionChains(self.driver)
        action.move_to_element(element).pause(random.uniform(*delay_range)).click().perform()

    def _enter_name(self):
        """T√¨m v√† nh·∫≠p t√™n m·ªôt c√°ch t·ª± nhi√™n."""
        logging.info("üîç  T√¨m ki·∫øm √¥ nh·∫≠p t√™n...")
        try:
            # S·ª≠ d·ª•ng XPath linh ho·∫°t h∆°n ƒë·ªÉ t√¨m √¥ nh·∫≠p t√™n
            name_input_xpath = "//input[@type='text' and (contains(@aria-label, 'name') or contains(@placeholder, 'name'))]"
            name_input = WebDriverWait(self.driver, 20).until(
                EC.visibility_of_element_located((By.XPATH, name_input_xpath))
            )
            logging.info("‚úÖ  ƒê√£ t√¨m th·∫•y √¥ nh·∫≠p t√™n.")

            name_input.clear()
            logging.info(f"‚úèÔ∏è  Nh·∫≠p t√™n: '{self.bot_name}'")
            for char in self.bot_name:
                name_input.send_keys(char)
                time.sleep(random.uniform(0.08, 0.25))
            
            self.save_screenshot("name_entered")
            return True
        except TimeoutException:
            logging.error("‚ùå  Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p t√™n sau 20 gi√¢y. C√≥ th·ªÉ trang ƒë√£ thay ƒë·ªïi ho·∫∑c b·ªã ch·∫∑n.")
            return False

    def _mute_mic_and_camera(self):
        """T·∫Øt micro v√† camera tr∆∞·ªõc khi tham gia."""
        logging.info("üîá  C·ªë g·∫Øng t·∫Øt camera v√† micro...")
        # S·ª≠ d·ª•ng thu·ªôc t√≠nh data-is-muted ƒë·ªÉ x√°c ƒë·ªãnh tr·∫°ng th√°i v√† h√†nh ƒë·ªông
        # N√∫t n√†y c√≥ th·ªÉ c√≥ nhi·ªÅu tr·∫°ng th√°i aria-label kh√°c nhau, nh∆∞ng data-* th∆∞·ªùng ·ªïn ƒë·ªãnh h∆°n
        media_button_xpath = "//button[@data-is-muted and (contains(@data-tooltip, 'microphone') or contains(@data-tooltip, 'camera'))]"
        try:
            media_buttons = WebDriverWait(self.driver, 15).until(
                EC.presence_of_all_elements_located((By.XPATH, media_button_xpath))
            )
            for button in media_buttons:
                # N·∫øu n√∫t ch∆∞a b·ªã t·∫Øt (data-is-muted="false")
                if button.get_attribute("data-is-muted") == "false":
                    device_name = button.get_attribute("data-tooltip")
                    logging.info(f"    -> T·∫Øt '{device_name}'...")
                    self._human_like_click(button)
                    time.sleep(random.uniform(0.5, 1))
            logging.info("‚úÖ  ƒê√£ ki·ªÉm tra v√† t·∫Øt camera/micro n·∫øu c·∫ßn.")
        except TimeoutException:
            logging.warning("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y n√∫t camera/micro. C√≥ th·ªÉ ch√∫ng ƒë√£ ƒë∆∞·ª£c t·∫Øt m·∫∑c ƒë·ªãnh.")
        except Exception as e:
            logging.error(f"‚ùå  L·ªói khi t·∫Øt camera/micro: {e}")

    def _click_join_button(self):
        """T√¨m v√† nh·∫•p v√†o n√∫t 'Ask to join' ho·∫∑c 'Join now'."""
        logging.info("üö™  T√¨m ki·∫øm n√∫t 'Ask to join'/'Join now'...")
        try:
            # XPath n√†y t√¨m n√∫t ch·ª©a span c√≥ vƒÉn b·∫£n mong mu·ªën
            join_button_xpath = "//button[.//span[contains(text(), 'Ask to join') or contains(text(), 'Join now')]]"
            join_button = WebDriverWait(self.driver, 15).until(
                EC.element_to_be_clickable((By.XPATH, join_button_xpath))
            )
            button_text = join_button.text.strip()
            logging.info(f"‚úÖ  ƒê√£ t√¨m th·∫•y n√∫t '{button_text}'.")
            
            self._human_like_click(join_button)
            logging.info(f"üöÄ  ƒê√£ nh·∫•p v√†o n√∫t '{button_text}'!")
            return True
        except TimeoutException:
            logging.error("‚ùå  Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng th·ªÉ nh·∫•p v√†o n√∫t tham gia.")
            return False

    def _check_for_errors(self):
        """Ki·ªÉm tra c√°c th√¥ng b√°o l·ªói t·ª©c th√¨ tr√™n trang."""
        error_messages = [
            "You can't join this video call",
            "B·∫°n kh√¥ng th·ªÉ tham gia",
            "The video call has ended"
        ]
        page_source = self.driver.page_source
        for msg in error_messages:
            if msg in page_source:
                logging.error(f"‚ùå  Ph√°t hi·ªán l·ªói tr√™n trang: '{msg}'")
                logging.error("üí°  G·ª£i √Ω: Ki·ªÉm tra link meeting, ƒë·∫£m b·∫£o meeting ƒëang ho·∫°t ƒë·ªông v√† cho ph√©p kh√°ch tham gia.")
                return True
        return False

    def join_meeting(self):
        """Th·ª±c hi·ªán to√†n b·ªô quy tr√¨nh tham gia cu·ªôc h·ªçp."""
        try:
            self._setup_driver()
            self._apply_stealth_measures()

            logging.info(f"üì°  ƒêang t·∫£i trang Google Meet: {self.meet_url}")
            self.driver.get(self.meet_url)

            # Ch·ªù trang t·∫£i xong
            WebDriverWait(self.driver, 30).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            time.sleep(random.uniform(3, 5)) # Ch·ªù ng·∫´u nhi√™n ƒë·ªÉ c√°c script c·ªßa trang t·∫£i xong
            self.save_screenshot("page_loaded")

            if self._check_for_errors():
                raise Exception("B·ªã ch·∫∑n ho·∫∑c cu·ªôc h·ªçp kh√¥ng h·ª£p l·ªá.")

            self._mute_mic_and_camera()
            time.sleep(random.uniform(1, 2))

            if not self._enter_name():
                raise Exception("Kh√¥ng th·ªÉ nh·∫≠p t√™n ng∆∞·ªùi d√πng.")
            
            time.sleep(random.uniform(1, 2.5))
            
            if not self._click_join_button():
                raise Exception("Kh√¥ng th·ªÉ nh·∫•p v√†o n√∫t tham gia.")
            
            logging.info("‚è≥  ƒêang ch·ªù ƒë∆∞·ª£c ch·∫•p nh·∫≠n v√†o ph√≤ng h·ªçp...")
            # Ch·ªù t·ªëi ƒëa 5 ph√∫t ƒë·ªÉ ƒë∆∞·ª£c ch·∫•p nh·∫≠n ho·∫∑c ph√°t hi·ªán l·ªói
            WebDriverWait(self.driver, 300).until(
                lambda d: "You'll join the call when someone lets you in" not in d.page_source
            )
            
            logging.info("üéâ  Bot ƒë√£ tham gia cu·ªôc h·ªçp th√†nh c√¥ng ho·∫∑c ƒë√£ h·∫øt th·ªùi gian ch·ªù!")
            self.save_screenshot("final_state_in_meeting")

            # Gi·ªØ bot trong cu·ªôc h·ªçp trong m·ªôt kho·∫£ng th·ªùi gian
            logging.info("Bot s·∫Ω ·ªü l·∫°i trong 2 ph√∫t tr∆∞·ªõc khi tho√°t...")
            time.sleep(120)

        except Exception as e:
            logging.error(f"üí•  ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh th·ª±c thi: {e}")
            self.save_screenshot("error_final")
            return False
        finally:
            self.close()
        return True
        
    def save_screenshot(self, name):
        """L∆∞u ·∫£nh ch·ª•p m√†n h√¨nh v√†o c·∫£ hai th∆∞ m·ª•c screenshots v√† output."""
        try:
            path = f"/app/screenshots/meet_{name}_{int(time.time())}.png"
            self.driver.save_screenshot(path)
            logging.info(f"üì∏  ƒê√£ l∆∞u ·∫£nh ch·ª•p m√†n h√¨nh: {path}")
            
            # Sao ch√©p v√†o th∆∞ m·ª•c output
            output_path = f"/app/output/meet_{name}.png"
            import shutil
            shutil.copy(path, output_path)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ l∆∞u ·∫£nh ch·ª•p m√†n h√¨nh: {e}")

    def close(self):
        """ƒê√≥ng tr√¨nh duy·ªát v√† b√°o c√°o th·ªùi gian ho·∫°t ƒë·ªông."""
        if self.driver:
            logging.info("üîö  ƒê√≥ng tr√¨nh duy·ªát...")
            self.driver.quit()
        duration = time.time() - self.start_time
        logging.info(f"üèÅ  Ho√†n t·∫•t th·ª±c thi. T·ªïng th·ªùi gian: {duration:.2f} gi√¢y.")


if __name__ == "__main__":
    # L·∫•y URL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c s·ª≠ d·ª•ng URL m·∫∑c ƒë·ªãnh
    # B·∫°n c√≥ th·ªÉ thay ƒë·ªïi link n√†y khi ch·∫°y:
    # docker run --env MEET_URL="https://meet.google.com/your-link" your-image-name
    MEET_URL = os.getenv("MEET_URL", "https://meet.google.com/shw-jumw-cmv")
    
    # ƒê·∫∑t t√™n cho bot
    BOT_NAME = "Assistant Bot"
    
    # Ch·∫°y ·ªü ch·∫ø ƒë·ªô kh√¥ng ƒë·∫ßu (headless) trong Docker, ƒë·∫∑t l√† False ƒë·ªÉ debug tr√™n m√°y local
    HEADLESS_MODE = True

    logging.info(f"üöÄ  B·∫Øt ƒë·∫ßu bot Google Meet cho URL: {MEET_URL}")
    
    bot = GoogleMeetBot(meet_url=MEET_URL, bot_name=BOT_NAME, headless=HEADLESS_MODE)
    success = bot.join_meeting()

    if success:
        logging.info("‚úÖ  Quy tr√¨nh c·ªßa Bot ƒë√£ ho√†n t·∫•t th√†nh c√¥ng.")
        sys.exit(0)
    else:
        logging.error("‚ùå  Quy tr√¨nh c·ªßa Bot ƒë√£ k·∫øt th√∫c v·ªõi l·ªói.")
        sys.exit(1)